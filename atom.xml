<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Goal Of Glory Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-20T07:21:21.397Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Borris Cho</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>나의 최초 플루터 앱</title>
    <link href="http://yoursite.com/2019/07/20/2019/20190720_Flutter_First_App/"/>
    <id>http://yoursite.com/2019/07/20/2019/20190720_Flutter_First_App/</id>
    <published>2019-07-19T16:55:00.000Z</published>
    <updated>2019-07-20T07:21:21.397Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><blockquote><p>해당 소스는 Flutter 공식 사이트를 참고 했어요.</p></blockquote><p>객체지향코드와 기본적인 프로그래밍에 익숙하다면 이번장에서 만드는 Flutter 코드가 이해가 될꺼라 생각이 들어요.</p><p>만들어볼 앱은 제한이 없는 스크롤 리스트 입니다. 여기서 배워갈 점은 아래와 같아요.</p><ol><li>Flutter App을 작성하는 방법.</li><li>Flutter App의 기본 구조.</li><li>검색과 패키지들을 사용해서 기능을 확장하는 방법.</li><li>빠른 개발을 Hot reload 사용 방법.</li><li>Stateful widget을 개발하는 방법.</li><li>무한하고 lazy하게 로드된 리스트를 생성하는 방법.</li></ol><h2 id="Flutter-App-만들기"><a href="#Flutter-App-만들기" class="headerlink" title="Flutter App 만들기"></a>Flutter App 만들기</h2><p>새로운 플루터 앱을 만들어 봅니다. 이름은 flutter_first_app 할께요.</p><p>이상 없이 생성이 되면 에뮬레이터를 실행시키고 새로 생성된 Flutter app을 기동시키세요.</p><p>우하단에 파란색 버튼과 You have pushed the button this many time: 0이라는 글씨가 중앙에 뜬 앱이 보인다면 이상없이 기본 Flutter App이 기동이 된거에요.</p><h3 id="1-lib-main-dart파일을-아래-코드로-변경해주세요"><a href="#1-lib-main-dart파일을-아래-코드로-변경해주세요" class="headerlink" title="1. lib/main.dart파일을 아래 코드로 변경해주세요."></a>1. lib/main.dart파일을 아래 코드로 변경해주세요.</h3><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">'Hello World'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hot Reload기능으로 인해서 코드를 저장시 실행된 애뮬레이터에 해당 코드가 반영됨을 확인 할 수 있어요. Hello World가 중앙에 뜨면 이상없이 적용이 된거에요.</p><p><strong>확인</strong></p><ul><li>Material App을 만들었습니다. Material은 모바일과 웹에서 시각적인 디자인 언어에요, Flutter는 많은 Material Widget들을 제공해줍니다.</li><li>Main 함수에서 Arrow(=&gt;) 표기법을 사용했어요. 한줄에서 표현이 가능한 함수나 메소드는 Arrow를 사용하세요.</li><li>MyApp은 StatelessWidget을 확장한 Widget이에요. Flutter는 대부분이 Widget입니다. alignment, padding, layout도 Widget이에요.</li><li>Scaffold Widget을 사용했어요. 이건 기본적으로 AppBar, Title 속성 및 Home Screen 영역을 담당하고 자식 Widget Tree를 유지하는 body 속성을 제공합니다.</li><li>Widget의 주요 작업은 build() 함수를 제공하는 거에요. build는 위젯을 어떻게 표시할지에 대한 코드들이 작성이 된답니다.</li><li>예제에서는 Center Widget을 사용해서 수직, 수평으로 중앙에 Text Widget을 표시해주고 있습니다.</li></ul><h3 id="2-외부-패키지-사용하기"><a href="#2-외부-패키지-사용하기" class="headerlink" title="2. 외부 패키지 사용하기"></a>2. 외부 패키지 사용하기</h3><p>english_word라는 외부 패키지를 사용해봐요. english_word는 가장 많이 사용되는 영어단어의 제공과 몇몇의 기능을 제공합니다.</p><p>Flutter Pub(<a href="https://pub.dev/flutter" target="_blank" rel="noopener">https://pub.dev/flutter</a>) 사이트에서 사람들이 올려놓은 외부 패키지를 검색해보세요. english_word를 검색해보세요.</p><p>아래처럼 pubspec.yaml에 english_word를 작성합니다.</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">pubspec.yaml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  flutter:</span></span><br><span class="line"><span class="attr">    sdk:</span> <span class="string">flutter</span></span><br><span class="line"><span class="attr">  english_words:</span> <span class="string">^3.1.0</span></span><br></pre></td></tr></table></figure><p>이상없이 추가 되면 ‘flutter pub get’을 터미널에 입력하거나 Tool에 표시되는 ‘package get’을 눌러봐요. 이건 선언한 소스를 앱에서 사용할 수 있게 다운받고 설정을 합니다. 이것은 pubspec.lock을 자동으로 생성하며 프로젝트에 끌어온 모든 패키지의 목록을 파일로 저장하고 버전 관리 합니다.</p><p>아래와 같이 main.dart에 english_word를 선언 해보죠.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:english_words/english_words.dart'</span>;</span><br></pre></td></tr></table></figure><p>자 english_word를 사용하여 Hello world를 english_word가 제공해주는 단어로 변경해보죠.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> wordPair = WordPair.random();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(wordPair.asPascalCase),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이상없이 작성하셨으면 Hello world가 랜덤한 Pascal case형태의 영어단어로 변경이 되었을 꺼에요.</p><p>코드를 수정하거나, Hot Reload 버튼을 클릭하면 중앙 텍스트가 계속 변경이 됩니다. 이것은 단어를 선택하는 WordPair.random();코드가 build 함수 안에 있기 때문입니다.</p><p>MaterialApp에 렌더링이 필요할때나 표시되는 플랫폼이 전환될때 build함수가 호출이 되어서 새로운 단어를 생성하고 적용하고 렌더링을 하게되요.</p><h3 id="3-Stateful-Widget-추가하기"><a href="#3-Stateful-Widget-추가하기" class="headerlink" title="3. Stateful Widget 추가하기"></a>3. Stateful Widget 추가하기</h3><p>Stateless란 불변의 의미를 지닙니다. Stateless Widget이란 사용되는 데이터의 값을 변경을 할 수 없는 위젯이며, 한번 지정된 값은 코드가 수정되지 않는한 변경을 할수 없음을 의미합니다.</p><p>Stateful Widget은 Stateless Widget과 다르게 불변하지 않으며 상황에 따라 사용하는 값을 변경할 수 있음을 의미합니다.</p><p>Stateful Widget은 2개의 클래스가 필요한데요, 하나는 StatefulWidget클래스와 State 클래스 입니다. StatefulWidget은 해당 위젯의 수명주기를 관리하는 State 클래스의 인스턴스를 생성하는 역할을 합니다.  </p><p>RandomWordsState 클래스를 추가해봅니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Add build() method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코드를 보면 RandomWordsState는 RandomWords를 위한 State 클래스를 확장한 것을 알 수 있습니다. 앱의 로직과 상태는 대부분 RandomWords Widget의 상태를 유지합니다.</p><p>RandomWords Widget을 추가해봅니다. RandomWords Widget은 RandomWordsState 클래스의 인스턴스를 만드는 외에 다른 작업은 거의 수행하지 않아요.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RandomWordsState createState() =&gt; RandomWordsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Add build() method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이후 IDE는 RandomWordsState클래스에 build메소드를 만들라고 알려줍니다. 아래처럼 build 메소드를 생성하고 랜덤한 Text Widget을 반환하도록 작성합니다. </p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RandomWordsState createState() =&gt; RandomWordsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> wordPair = WordPair.random();</span><br><span class="line">    <span class="keyword">return</span> Text(wordPair.asPascalCase);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이전에 표시를 담당하는 body속성의 Center 안의 child값에 해당 RandomWords위젯을 호출하도록 작성합니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">final</span> wordPair = WordPair.random();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: RandomWords(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-무한-스크롤-리스트-뷰-만들기"><a href="#4-무한-스크롤-리스트-뷰-만들기" class="headerlink" title="4. 무한 스크롤 리스트 뷰 만들기"></a>4. 무한 스크롤 리스트 뷰 만들기</h3><p>이 단계에서는 RandomWordsState를 확장하여 단어 목록을 생성하고 표시를 합니다. 사용자가 스크롤 하면 ListView 위젯에 표시된 목록이 무한대로 커집니다.</p><p>ListView의 Builder Factory 생성자를 사용하면 필요할 때 Listview를 Lazy하게 빌드 할 수 있습니다.</p><p>단어를 저장하기 위해서 _suggestions라는 WordPair 배열을 선언합니다. 그리고 글꼴의 크기를 크게 하기 위해서 _biggerFont라는 TextStyle 인스턴스 변수를 작성 합니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br><span class="line">  <span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> wordPair = WordPair.random();</span><br><span class="line">    <span class="keyword">return</span> Text(wordPair.asPascalCase);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java와는 달리 Dart에는 public, protected, private 키워드가 없습니다. 변수 식별자가 underscore(_)로 시작하면 해당 변수는 해당 라이브러리 내부에서만 사용할 수 있습니다. Java의 private와 유사합니다.</p><p>RandomWordsState 클래스에 _buildSuggestions() 함수를 추가합니다. 이것은 단어를 표시하는 ListView를 작성합니다.</p><p>ListView클래스는 익명함수로 지정된 Factory Builder 및 Callback 함수인 builder와 itemBuilder를 제공합니다.<br>ItemBuilder는 2개의 인자를 받는데요, BuildContext와 반복자 i가 전달됩니다. 반복자 i는 0에서 시작해서 해당 함수가 호출될때마다 계속 증가 됩니다. 해당 함수는 스크롤 할때마다 호출이 됩니다.<br>그리고 단어를 표시해주는 ListTile Widget을 홀수로 구역을 분리해주는 선인 Divider는 짝수별로 생성합니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildSuggestions() &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemBuilder: (context, i) &#123;</span><br><span class="line">        <span class="comment">// 반복자 i가 짝수일때 divider를 반환한다.</span></span><br><span class="line">        <span class="keyword">if</span>(i.isOdd) <span class="keyword">return</span> Divider();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 이 표현식은 i를 2로 나누고 나는 목의 값을 반환합니다.</span></span><br><span class="line">        <span class="keyword">final</span> index = i ~/ <span class="number">2</span>; </span><br><span class="line">        <span class="comment">// List에 표시되는 단어의 수가 _suggestion수보다 클때 다시 _suggestion에 10개의 단어를 추가합니다.</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt;= _suggestions.length) &#123;  </span><br><span class="line">          _suggestions.addAll(generateWordPairs().take(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _buildRow(_suggestions[index]);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>_buildSuggestions함수는 단어당 한번씩 _buildRow()함수를 호출 합니다. _buildRow함수를 만들어 봅니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListTile(</span><br><span class="line">    title: Text(</span><br><span class="line">      pair.asPascalCase,</span><br><span class="line">      style: _biggerFont,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RandomWordsState 클래스에서 단어를 생성하는 부분을_buildSuggestions()를 사용해서 ListView Widget을 반환하도록 수정합니다. Scaffold도 Widget이기 때문에 이전 MyApp에서 사용했던 Scaffold를 RandomWordState에서도 사용할 수 있습니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title : Text(<span class="string">'infinite Scroll Word'</span>),</span><br><span class="line">    ),</span><br><span class="line">    body : _buildSuggestions()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 MyApp의 build부분의 MaterialApp의 home속성 부분을 stateful widget RandomWords으로 수정해줍니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">main.dart</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">final</span> wordPair = WordPair.random();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: RandomWords()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기까지 이상없이 작성하셨으면 무한 스크롤되는 앱이 동작을 하게 됩니다.</p><p>지금 까지 실행한 앱은 디버그 모드로 작성이 되어서 여러 큰 리소스를 사용하여 빠르게 개발을 도와줍니다. 만약에 앱을 출시하거나 성능을 분석하기 위해서라면 Flutter’s profile or release builds를 사용해야 합니다. </p><p>자세한 정보는 여기(<a href="https://flutter.dev/docs/testing/build-modes" target="_blank" rel="noopener">https://flutter.dev/docs/testing/build-modes</a>) 에서 참고 하시기 바래요.</p><p>다음 장에서는 해당 앱에 기능을 더 붙이도록 하겠습니다.</p><p>읽어주셔서 감사합니다. 좋은 하루 보내세요.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;간단한 나의 최초 Flutter App을 만들어 보아요.&lt;/p&gt;
    
    </summary>
    
      <category term="flutter" scheme="http://yoursite.com/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>앱개발을 위한 Flutter를 소개합니다.</title>
    <link href="http://yoursite.com/2019/07/13/2019/20190713_Flutter_Intro/"/>
    <id>http://yoursite.com/2019/07/13/2019/20190713_Flutter_Intro/</id>
    <published>2019-07-13T05:16:00.000Z</published>
    <updated>2019-07-20T06:17:50.935Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><blockquote><p>Flutter is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase.</p><footer><strong>Flutter</strong></footer></blockquote><p>Flutter는 단일 코드베이스로 모바일, 웹, 데스크탑 어플리케이션을 만들기 위한 UI Tookit이라고 공식 사이트에서 소개 하고 있습니다.</p><p><strong>Fast Development</strong></p><p>Stateful을 사용한 Hot Reload를 제공, 상태값의 변경에 따라 실시간으로 앱의 화면을 다시 빠르게 렌더링 한다, 그리고 몇분 만에 기본 화면을 구현 할 수 있는 커스텀 가능한 위젯을 제공합니다.</p><p><strong>Expressive and Flexible UI</strong></p><p>사용자 경험을 중요시하는 기능, 화면의 표현 방법, 유연한 설계 방법을 제공하고 아름다운 Material Design과 Cupertion(IOS-flavor) widget과 풍부한 모션 API, 매끄러운 스크롤 기능을 제공합니다. </p><p><strong>Native Performance</strong></p><p>앱의 스크롤링, 네비게이터, 아이콘, 폰트를 안드로이드 및 IOS 둘다 네이티브와 동일한 성능과 기능을 제공합니다.</p><p><strong>Intro Video</strong></p><p>Google 및 개발자로부터 다음 영상목록을 통해서 배울 수 있습니다. <a href="https://www.youtube.com/flutterdev" target="_blank" rel="noopener">Youtube Channel</a></p><p></p><div class="video-container"><iframe src="//www.youtube.com/embed/sPW7nDBqt8w" frameborder="0" allowfullscreen></iframe></div><p>간단한 소개와 위의 영상을 통해 Flutter에 대해서 좀더 궁금해 진다면 한번 살펴보는 것도 좋을꺼라 생각이 듭니다.</p><p>다들 즐거운 하루를 보내세요.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;간단히 Flutter에 관해서 알아보자.&lt;/p&gt;
    
    </summary>
    
      <category term="flutter" scheme="http://yoursite.com/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
</feed>
